#!/usr/bin/env sh
set -eu # Exit on error and treat unset variables as errors

# --- Configuration ---
# Source Python script containing the logic
SOURCE_PYTHON_SCRIPT_NAME="_postgis-manual.py"
# Target executable script name (no extension)
TARGET_EXECUTABLE_NAME="postgis-manual"
# Define dependencies directly here
PYTHON_PACKAGES="beautifulsoup4>=4.12 requests>=2.31 lxml>=4.9"
# Directory for the dedicated virtual environment (relative to the script)
VENV_DIR=".venv_pg_manual"
# Required Python version string (for messages and 'uv venv -p' hint)
PYTHON_VERSION_REQ="3.12"
# --- End Configuration ---

# Get the directory where this install script resides
SCRIPT_DIR=$(cd -- "$(dirname -- "$0")" && pwd)
SOURCE_PYTHON_SCRIPT="${SCRIPT_DIR}/${SOURCE_PYTHON_SCRIPT_NAME}"
TARGET_EXECUTABLE="${SCRIPT_DIR}/${TARGET_EXECUTABLE_NAME}"
TARGET_VENV_DIR="${SCRIPT_DIR}/${VENV_DIR}"

# Function to detect user's shell rc file
detect_shell_rc() {
  case "$SHELL" in
    *zsh*)  echo "$HOME/.zshrc" ;;
    *fish*) echo "$HOME/.config/fish/config.fish" ;;
    *)      echo "$HOME/.bashrc" ;; # Default to bashrc
  esac
}

# === Step 1: Check/Install uv ===
if ! command -v uv > /dev/null 2>&1; then
  echo "Installing uv..."
  if curl -LsSf https://astral.sh/uv/install.sh | sh; then
    echo "'uv' installed successfully to $HOME/.local/bin"
  else
    echo "Error: Failed to install uv." >&2; exit 1
  fi
  shell_rc=$(detect_shell_rc)
  if [ -f "$shell_rc" ]; then
    if ! grep -qF 'export PATH="$HOME/.local/bin:$PATH"' "$shell_rc"; then
      if ! grep -q "$HOME/\.local/bin" "$shell_rc"; then
          echo '' >> "$shell_rc"; echo '# Added by postgis-manual installer' >> "$shell_rc"; echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$shell_rc"
          echo "PATH updated in $shell_rc. Please restart your shell or run 'source $shell_rc'."
      else
          echo "Warning: $HOME/.local/bin seems mentioned in $shell_rc, but not standard export format. Manual check recommended."
      fi
    else
      echo "$HOME/.local/bin already in PATH in $shell_rc."
    fi
  else
      echo "Warning: Could not find shell config ($shell_rc). Please add $HOME/.local/bin to PATH manually."
  fi
  export PATH="$HOME/.local/bin:$PATH"
  if ! command -v uv > /dev/null 2>&1; then
     echo "Error: uv installed but still not found in PATH for current script." >&2; exit 1
  fi
else
  echo "uv is already installed."
fi

# === Step 2: Check Source Python Script ===
if [ ! -f "${SOURCE_PYTHON_SCRIPT}" ]; then
    echo "Error: Source script ${SOURCE_PYTHON_SCRIPT_NAME} not found in ${SCRIPT_DIR}" >&2
    exit 1
fi
if [ ! -r "${SOURCE_PYTHON_SCRIPT}" ]; then
    echo "Error: Cannot read source script ${SOURCE_PYTHON_SCRIPT_NAME}" >&2
    exit 1
fi

# === Step 3: Create Virtual Environment ===
echo "Creating dedicated Python environment in ${TARGET_VENV_DIR}..."
rm -rf "${TARGET_VENV_DIR}"
if ! uv venv "${TARGET_VENV_DIR}" -p "${PYTHON_VERSION_REQ}" --seed > /dev/null 2>&1; then
    echo "Could not create venv with Python ${PYTHON_VERSION_REQ}. Trying default python..."
    if ! uv venv "${TARGET_VENV_DIR}" --seed > /dev/null 2>&1; then
        echo "Error: Failed to create virtual environment using 'uv venv'." >&2
        echo "Please ensure Python ${PYTHON_VERSION_REQ}+ is installed and accessible to uv." >&2
        exit 1
    fi
fi
echo "Virtual environment created."
VENV_PYTHON="${TARGET_VENV_DIR}/bin/python"
if [ ! -x "${VENV_PYTHON}" ]; then
    echo "Error: Virtual environment Python executable not found at ${VENV_PYTHON}" >&2
    exit 1
fi

# === Step 4: Install Dependencies ===
echo "Installing dependencies (${PYTHON_PACKAGES})..."
if ! uv pip install --python "${VENV_PYTHON}" ${PYTHON_PACKAGES} --quiet; then
    echo "Error: Failed to install dependencies using 'uv pip install'." >&2
    echo "--- uv pip install output ---"
    uv pip install --python "${VENV_PYTHON}" ${PYTHON_PACKAGES}
    echo "---------------------------"
    exit 1
fi
echo "Dependencies installed successfully."

# 5. Create Target Executable with Polyglot Shebang
echo "Creating executable ${TARGET_EXECUTABLE_NAME}..."

# --- Calculate ABSOLUTE path to venv python ---
VENV_PYTHON_ABS="${SCRIPT_DIR}/${VENV_DIR}/bin/python"

# --- Start: Polyglot Shebang Generation (Alternative) ---
# This structure uses '||' which might be parsed more harmlessly by Python
read -r -d '' NEW_SHEBANG <<EOF || true
#!/bin/sh
'''exec' "$(dirname "\$0")/${VENV_DIR}/bin/python" "\$0" "\$@"
'''
# === This script is generated by install.sh - Do not modify directly ===
# === Source logic is in ${SOURCE_PYTHON_SCRIPT_NAME} ===
# PYTHON CODE STARTS AFTER THIS LINE
EOF
# --- End: Polyglot Shebang Generation ---

# --- Read Python Code Body from SOURCE script ---
PYTHON_CODE_BODY=$(tail -n +2 "${SOURCE_PYTHON_SCRIPT}" 2>/dev/null || true)
if [ -z "$PYTHON_CODE_BODY" ]; then
    echo "Error: Failed to read code body from ${SOURCE_PYTHON_SCRIPT_NAME}" >&2
    exit 1
fi

# --- Write the final executable ---
TARGET_TMP="${TARGET_EXECUTABLE}.tmp"
{
  # Write shebang block (ends with newline from heredoc)
  printf "%s\n" "$NEW_SHEBANG"
  # Write python body
  printf "%s\n" "$PYTHON_CODE_BODY"
} > "$TARGET_TMP" || { echo "Error: Failed to write to temporary file ${TARGET_TMP}" >&2; exit 1; }

mv "$TARGET_TMP" "$TARGET_EXECUTABLE" || { echo "Error: Failed to move temporary file to ${TARGET_EXECUTABLE}." >&2; rm -f "$TARGET_TMP"; exit 1; }

# === Step 6: Make Target Executable ===
chmod +x "${TARGET_EXECUTABLE}"
echo "${TARGET_EXECUTABLE_NAME} created and is now executable."

# --- Finished ---
echo ""
echo "Setup complete!"
echo "You can now run the PostGIS downloader directly:"
# echo "  cd ${SCRIPT_DIR}" # Optional reminder
echo "  ./${TARGET_EXECUTABLE_NAME}"
echo ""

exit 0
